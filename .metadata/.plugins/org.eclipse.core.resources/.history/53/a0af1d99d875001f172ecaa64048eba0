package ejercicios;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class SopaDeLetras {

	private int n;
	private char[][] matriz;
	
	
	
	public SopaDeLetras(int n) {
		super();
		if (n <= 0) {
            throw new IllegalArgumentException("El tamaÃ±o debe de ser mayor que cero");
        }
		this.n = n;
		this.matriz = new char[n][n];
		 inicializarMatriz();
    }

    private void inicializarMatriz() {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matriz[i][j] = '*';
            }
        }
    }
    
    public void colocarPalabraHorizontal(String palabra, Coordenada coordenada) {
    	if(palabra.length()+coordenada.getColumna()>this.n) {
    		throw new IllegalArgumentException("La palabra es demasiado grande para caber en la sopa de letras");
    	}
    	if(coordenada.getColumna()<0 || coordenada.getFila()<0) {
    		throw new IllegalArgumentException("las coordenadas deben ser mayores que 0");
    	}
    	if(coordenada.getColumna()>n || coordenada.getFila()>n) {
    		throw new IllegalArgumentException("las coordenadas son mayores que la matriz");
    	}
    	for (int i = 0; i < palabra.length(); i++) {
            matriz[coordenada.getFila()][coordenada.getColumna() + i] = palabra.charAt(i);
        }
    }
    public void colocarPalabraVertical(String palabra, Coordenada coordenada) {
    	if(palabra.length()+coordenada.getFila()>this.n) {
    		throw new IllegalArgumentException("La palabra es demasiado grande para caber en la sopa de letras");
    	}
    	if(coordenada.getFila()<0 || coordenada.getColumna()<0) {
    		throw new IllegalArgumentException("las coordenadas deben ser mayores que 0");
    	}
    	if(coordenada.getFila()>n || coordenada.getColumna()>n) {
    		throw new IllegalArgumentException("las coordenadas son mayores que la matriz");
    	}
    	for (int i = 0; i < palabra.length(); i++) {
            matriz[coordenada.getFila()+i][coordenada.getColumna()] = palabra.charAt(i);
        }
    }



    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sb.append(matriz[i][j]).append(" ");
            }
            sb.append("\n");
        }
        return sb.toString();
    }
    
    
    
	 public Map<Character, Integer> mostrarResumenDeLetras() {
	        Map<Character, Integer> mapa = new HashMap<>();
	        for (int i = 0; i < n; i++) {
	            for (int j = 0; j < n; j++) {
	                char letra = matriz[i][j];
	                if (letra != '*') {
	                    mapa.put(letra, mapa.getOrDefault(letra, 0) + 1);
	                }
	            }
	        }
	        return mapa;
	    }

	public static void main(String[] args) {

	}

}
